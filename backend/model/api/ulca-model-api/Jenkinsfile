#!groovy
import hudson.model.*

node('server_build_slave') {

    try {

        stage('Checkout') {
            checkout scm
        }

        stage('Build, Tag & Push to ACR') {
            withCredentials([usernamePassword(credentialsId: 'acr-creds', passwordVariable: 'ACR_PASS', usernameVariable: 'ACR_USER')]) {
                sh '''
                cd backend/model/api/ulca-model-api
                ls -al

                # Clean up old test model folder
                if [ -d "$(pwd)/src/test/resources/model" ]; then
                    sudo rm -rf $(pwd)/src/test/resources/model
                fi

                # Remove any old exited container with same name
                if [ $(docker ps -q -f status=exited --filter "name=$JOB_BASE_NAME") ]; then
                    docker rm "$JOB_BASE_NAME"
                fi

                # Run Maven build in container
                docker run -v $(pwd):/opt --name "$JOB_BASE_NAME" maven:3.8.1-jdk-11 /bin/sh -c "cd /opt && mvn clean package"
                docker rm "$JOB_BASE_NAME"

                # Tag commit ID
                commit_id=${BUILD_ID}-$(git rev-parse --short HEAD)
                echo $commit_id > commit_id.txt

                # Define ACR repo and build image
                acr_repo="acrulcaprodcin001.azurecr.io/$image_name:$commit_id"
                docker login acrulcaprodcin001.azurecr.io -u $ACR_USER -p $ACR_PASS
                docker build -t $acr_repo .

                # Push to ACR
                docker push $acr_repo

                # Cleanup
                sudo rm -rf target/
                '''
            }
        }

        // Optional: Display tag in Jenkins UI
        def matcher = manager.getLogMatcher(".*tagged acrulcaprodcin001.azurecr.io/(.*).*")
        if (matcher?.matches()) {
            def buildMsg = matcher.group(1)
            manager.addShortText(buildMsg)
        }

    } catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
}
