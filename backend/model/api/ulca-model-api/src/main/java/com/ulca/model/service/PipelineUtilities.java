package com.ulca.model.service;

import org.intellij.lang.annotations.Language;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.task.TaskRejectedException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

import com.ulca.model.dao.ModelExtended;
import com.ulca.model.dao.PipelineModel;
import com.ulca.model.response.pipeline.script.*;

import io.swagger.model.SupportedTasks;
import io.swagger.model.TTSInference;
import io.swagger.model.LanguagePair;
import io.swagger.model.LanguagePairs;
import io.swagger.model.SupportedLanguages;
import io.swagger.pipelinemodel.ConfigList;
import io.swagger.pipelinemodel.ConfigSchema;
import io.swagger.pipelinemodel.LanguageSchema;
import io.swagger.pipelinemodel.LanguagesList;
import io.swagger.pipelinemodel.TaskSpecification;
import io.swagger.pipelinemodel.TaskSpecifications;
import io.swagger.pipelinerequest.ASRResponseConfig;
import io.swagger.pipelinerequest.ASRTask;
import io.swagger.pipelinerequest.ASRTaskInference;
import io.swagger.pipelinerequest.OCRResponseConfig;
import io.swagger.pipelinerequest.OCRTask;
import io.swagger.pipelinerequest.OCRTaskInference;
import io.swagger.pipelinerequest.PipelineResponseLanguageSchema;
import io.swagger.pipelinerequest.PipelineResponseLanguagesList;
import io.swagger.pipelinerequest.PipelineTask;
import io.swagger.pipelinerequest.PipelineTasks;
import io.swagger.pipelinerequest.TTSTask;
import io.swagger.pipelinerequest.TTSTaskInference;
import io.swagger.pipelinerequest.TaskSchemaList;
import io.swagger.pipelinerequest.TranslationRequestConfig;
import io.swagger.pipelinerequest.TranslationResponseConfig;
import io.swagger.pipelinerequest.TranslationTask;
import io.swagger.pipelinerequest.TranslationTaskInference;
import io.swagger.pipelinerequest.TransliterationResponseConfig;
import io.swagger.pipelinerequest.TransliterationTask;
import io.swagger.pipelinerequest.TransliterationTaskInference;
import io.swagger.pipelinerequest.TTSResponseConfig;

import lombok.extern.slf4j.Slf4j;

import com.ulca.model.dao.ModelDao;

@Slf4j
@Service
public class PipelineUtilities {
    // Config List is of the pipeline model and taskSpecifications is of generated
    // content
    @Autowired
    ModelDao modelDao;

    TaskSpecifications getPossibleConfigForCurrentTask(LanguagePair lp, TaskSpecification modelTaskSpecification,
            TaskSpecifications previousTaskSpecifications) {
        TaskSpecification taskSpecification = new TaskSpecification();
        taskSpecification.setTaskType(modelTaskSpecification.getTaskType());
        ConfigList returnConfigList = new ConfigList();
        // Not the first task of pipelinetasks
        if (previousTaskSpecifications.size() > 0) {
            if (lp.getSourceLanguage() != null) // There are configs in the task provided by user
            {
                // For each Config within previous task specifications generated by this logic
                for (int i=0;i<previousTaskSpecifications.get(previousTaskSpecifications.size() - 1).getTaskConfig().size();i++)
                {
                    // If source language matches for model and lp or if source script code is empty
                    // or matches
                    boolean taskAdded = false;
                    ConfigSchema previousTaskSchema = previousTaskSpecifications.get(previousTaskSpecifications.size() - 1).getTaskConfig().get(i);
                    if (previousTaskSchema.getTargetLanguage() == lp.getSourceLanguage()) {
                        if (lp.getSourceScriptCode() == null || lp.getSourceScriptCode() == previousTaskSchema.getTargetScriptCode()) {
                            // go through each config in pipeline model
                            for (ConfigSchema modelTask : modelTaskSpecification.getTaskConfig()) {
                                // if source lang of pipeline model config matches previous task target lang
                                if (modelTask.getSourceLanguage() == previousTaskSchema.getTargetLanguage() && modelTask
                                        .getSourceScriptCode() == previousTaskSchema.getTargetScriptCode()) {
                                    if(lp.getTargetLanguage()==null || lp.getTargetLanguage() == modelTask.getTargetLanguage())
                                    {
                                        if(lp.getTargetScriptCode() == null || lp.getTargetScriptCode() == modelTask.getTargetScriptCode())
                                        {
                                            ConfigSchema confSchema = new ConfigSchema();
                                            confSchema = modelTask;
                                            if (confSchema.getTargetLanguage() == null)
                                                confSchema.setTargetLanguage(confSchema.getSourceLanguage());
                                            
                                            if (confSchema.getTargetScriptCode() == null)
                                                confSchema.setTargetScriptCode(confSchema.getSourceScriptCode());
                                            
                                            taskAdded = true;
                                            
                                            if(!returnConfigList.contains(confSchema))
                                                returnConfigList.add(confSchema);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(taskAdded == false)
                    {
                        previousTaskSpecifications.get(previousTaskSpecifications.size() - 1).getTaskConfig().remove(i);
                        i--;
                    }
                }
            } else // if config not entered by user
            {
                for (int i=0;i<previousTaskSpecifications.get(previousTaskSpecifications.size() - 1).getTaskConfig().size();i++)
                {
                    // If source language matches for model and lp or if source script code is empty
                    // or matches
                    boolean taskAdded = false;
                    ConfigSchema previousTaskSchema = previousTaskSpecifications.get(previousTaskSpecifications.size() - 1).getTaskConfig().get(i);
                    for (ConfigSchema modelTask : modelTaskSpecification.getTaskConfig()) {
                        // if source lang of pipeline model config matches previous task target lang
                        if (modelTask.getSourceLanguage() == previousTaskSchema.getTargetLanguage()
                                && modelTask.getSourceScriptCode() == previousTaskSchema.getTargetScriptCode()) {
                            ConfigSchema confSchema = new ConfigSchema();
                            confSchema = modelTask;
                            if (confSchema.getTargetLanguage() == null)
                                confSchema.setTargetLanguage(confSchema.getSourceLanguage());
                            
                            if (confSchema.getTargetScriptCode() == null)
                                confSchema.setTargetScriptCode(confSchema.getSourceScriptCode());
                            
                            taskAdded = true;
                            
                            if(!returnConfigList.contains(confSchema))
                                returnConfigList.add(confSchema);
                        }
                    }
                    if(taskAdded == false)
                    {
                        previousTaskSpecifications.get(previousTaskSpecifications.size() - 1).getTaskConfig().remove(i);
                        i--;
                    }
                }
            }
        }
        // It is the first task of pipelinetasks
        else {
            if (lp.getSourceLanguage() == null) // There are no configs in the task provided by user
            {
                for (ConfigSchema modelTask : modelTaskSpecification.getTaskConfig()) {
                    ConfigSchema confSchema = new ConfigSchema();
                    confSchema = modelTask;
                    if (confSchema.getTargetLanguage() == null)
                        confSchema.setTargetLanguage(confSchema.getSourceLanguage());
                    if (confSchema.getTargetScriptCode() == null)
                        confSchema.setTargetScriptCode(confSchema.getSourceScriptCode());
                    if(!returnConfigList.contains(confSchema))
                        returnConfigList.add(confSchema);
                }
            } else // There are configs in the task provided by the user
            {
                for (ConfigSchema taskConfigSchema : modelTaskSpecification.getTaskConfig()) {
                    // If source language matches for model and lp or if source script code is empty
                    // or matches
                    if (taskConfigSchema.getSourceLanguage() == lp.getSourceLanguage()) {
                        if (lp.getSourceScriptCode() == null
                                || taskConfigSchema.getSourceScriptCode() == lp.getSourceScriptCode()) {
                            if (lp.getTargetLanguage() == null
                                    || taskConfigSchema.getTargetLanguage() == lp.getTargetLanguage()) {
                                if (lp.getTargetScriptCode() == null
                                        || taskConfigSchema.getTargetScriptCode() == lp.getTargetScriptCode()) {
                                    if (taskConfigSchema.getTargetLanguage() == null)
                                        taskConfigSchema.setTargetLanguage(taskConfigSchema.getSourceLanguage());
                                    if (taskConfigSchema.getTargetScriptCode() == null)
                                        taskConfigSchema.setTargetScriptCode(taskConfigSchema.getSourceScriptCode());
                                    if(!returnConfigList.contains(taskConfigSchema))
                                        returnConfigList.add(taskConfigSchema);
                                }
                            }
                        }
                    }
                }
            }
        }
        taskSpecification.setTaskConfig(returnConfigList);
        previousTaskSpecifications.add(taskSpecification);
        return previousTaskSpecifications;
    }

    TaskSpecifications getIndividualTaskSpecifications(PipelineTasks pipelineTasks, PipelineModel pipelineModel) {
        TaskSpecifications taskSpecifications = new TaskSpecifications();
        // For each input pipeline task
        for (PipelineTask pipelineTask : pipelineTasks) {
            LanguagePair lp = new LanguagePair();
            // If current input pipeline task is translation, send it's language pair or
            // null if not present
            // Also send task specification of pipeline model
            if (pipelineTask instanceof TranslationTask) {
                TranslationTask translationTask = (TranslationTask) pipelineTask;
                // get language pair if it exists
                if (translationTask.getConfig() != null && translationTask.getConfig().getLanguage() != null) {
                    lp = translationTask.getConfig().getLanguage();
                }
                // get pipeline model task specifications for this particular task
                for (TaskSpecification pipelineSpecification : pipelineModel.getTaskSpecifications()) {
                    if (pipelineSpecification.getTaskType() == SupportedTasks.TRANSLATION) {
                        taskSpecifications = getPossibleConfigForCurrentTask(lp, pipelineSpecification, taskSpecifications);
                    }
                }
            } else if (pipelineTask instanceof TransliterationTask) {
            	TransliterationTask transliterationTask = (TransliterationTask) pipelineTask;
                // get language pair if it exists
                if (transliterationTask.getConfig() != null && transliterationTask.getConfig().getLanguage() != null) {
                    lp = transliterationTask.getConfig().getLanguage();
                }
                // get pipeline model task specifications for this particular task
                for (TaskSpecification pipelineSpecification : pipelineModel.getTaskSpecifications()) {
                    if (pipelineSpecification.getTaskType() == SupportedTasks.TRANSLITERATION) {
                        taskSpecifications = getPossibleConfigForCurrentTask(lp, pipelineSpecification, taskSpecifications);
                    }
                }
            }
            
            else if (pipelineTask instanceof ASRTask) {
                ASRTask asrTask = (ASRTask) pipelineTask;
                if (asrTask.getConfig() != null && asrTask.getConfig().getLanguage() != null) {
                    lp = asrTask.getConfig().getLanguage();
                }
                // get pipeline model task specifications for this particular task
                for (TaskSpecification pipelineSpecification : pipelineModel.getTaskSpecifications()) {
                    if (pipelineSpecification.getTaskType() == SupportedTasks.ASR) {
                        taskSpecifications = getPossibleConfigForCurrentTask(lp, pipelineSpecification, taskSpecifications);
                    }
                }
            } else if (pipelineTask instanceof TTSTask) {
                TTSTask ttsTask = (TTSTask) pipelineTask;
                if (ttsTask.getConfig() != null && ttsTask.getConfig().getLanguage() != null) {
                    lp = ttsTask.getConfig().getLanguage();
                }
                // get pipeline model task specifications for this particular task
                for (TaskSpecification pipelineSpecification : pipelineModel.getTaskSpecifications()) {
                    if (pipelineSpecification.getTaskType() == SupportedTasks.TTS) {
                        taskSpecifications = getPossibleConfigForCurrentTask(lp, pipelineSpecification, taskSpecifications);
                    }
                }
            }else if (pipelineTask instanceof OCRTask) {
            	OCRTask ocrTask = (OCRTask) pipelineTask;
                if (ocrTask.getConfig() != null && ocrTask.getConfig().getLanguage() != null) {
                    lp = ocrTask.getConfig().getLanguage();
                }
                // get pipeline model task specifications for this particular task
                for (TaskSpecification pipelineSpecification : pipelineModel.getTaskSpecifications()) {
                    if (pipelineSpecification.getTaskType() == SupportedTasks.OCR) {
                        taskSpecifications = getPossibleConfigForCurrentTask(lp, pipelineSpecification, taskSpecifications);
                    }
                }
            }
        }
        return taskSpecifications;
    }

    PipelineResponseLanguagesList getPipelineResponseLanguagesList(TaskSpecifications individualTaskSpecifications) {
        PipelineResponseLanguagesList pipelineResponseLanguagesList = new PipelineResponseLanguagesList();

        // Go through each config of the first task
        for (ConfigSchema firstTaskConfigSchema : individualTaskSpecifications.get(0).getTaskConfig()) {
            PipelineResponseLanguageSchema responseLanguageSchema = new PipelineResponseLanguageSchema();
            // set source language as language of the first task
            boolean sourceLanguageExists = false;
            //see if the source language exists already
            int responseSchemaIndex = -1;
            for(int i=0;i<pipelineResponseLanguagesList.size();i++)
            {
                if(pipelineResponseLanguagesList.get(i).getSourceLanguage().equals(firstTaskConfigSchema.getSourceLanguage()))
                {
                    sourceLanguageExists = true;
                    responseSchemaIndex = i;
                    break;
                }
            }
            responseLanguageSchema.setSourceLanguage(firstTaskConfigSchema.getSourceLanguage());
            List<ConfigSchema> targetLanguages = new ArrayList<ConfigSchema>();
            targetLanguages.add(firstTaskConfigSchema);

            int targetLangSize = targetLanguages.size();
            int currentTask = 1;
            // for each element within targetLanguages, find possible combinations in the
            // next task
            // DFS Logic for Language Identification
            while (currentTask < individualTaskSpecifications.size()) {
                while (targetLangSize > 0) {
                    // Obtain target language details of previous task
                    ConfigSchema previousTaskTargetLanguage = targetLanguages.get(0);
                    targetLanguages.remove(0);
                    // Get all task config for current task
                    for (ConfigSchema currentTaskConfigSchema : individualTaskSpecifications.get(currentTask)
                            .getTaskConfig()) {
                        if (previousTaskTargetLanguage.getTargetLanguage() == currentTaskConfigSchema
                                .getSourceLanguage() &&
                                previousTaskTargetLanguage.getTargetScriptCode() == currentTaskConfigSchema
                                        .getSourceScriptCode()) {
                            targetLanguages.add(currentTaskConfigSchema);
                        }
                    }
                    targetLangSize--;
                }
                targetLangSize = targetLanguages.size();
                currentTask++;
            }
            for (ConfigSchema finalTaskConfigSchema : targetLanguages) {
                if(responseLanguageSchema.getTargetLanguageList()==null ||
                    !responseLanguageSchema.getTargetLanguageList().contains(finalTaskConfigSchema.getTargetLanguage()))
                {
                    if(sourceLanguageExists == true)
                    {   
                        if(!pipelineResponseLanguagesList.get(responseSchemaIndex).getTargetLanguageList().contains(finalTaskConfigSchema.getTargetLanguage()))
                        pipelineResponseLanguagesList.get(responseSchemaIndex).addTargetLanguageListItem(finalTaskConfigSchema.getTargetLanguage());
                    }
                    else
                    {
                        responseLanguageSchema.addTargetLanguageListItem(finalTaskConfigSchema.getTargetLanguage());                        
                    } 
                }
            }
            if(sourceLanguageExists == false)
                pipelineResponseLanguagesList.add(responseLanguageSchema);
        }
        return pipelineResponseLanguagesList;
    }

    TaskSchemaList getPipelineResponseSchemaList(TaskSpecifications individualTaskSpecifications)
    {
        TaskSchemaList schemaList = new TaskSchemaList();
        for(TaskSpecification individualSpec : individualTaskSpecifications)
        {
            if(individualSpec.getTaskType() == SupportedTasks.ASR)
            {
                ASRTaskInference asrTaskInference = new ASRTaskInference();
                for(ConfigSchema curConfigSchema : individualSpec.getTaskConfig())
                {
                    ASRResponseConfig asrResponseConfig = new ASRResponseConfig();
                    log.info("Checking Model ID :: "+curConfigSchema.getModelId());
                    long startTime = System.currentTimeMillis();
                    ModelExtended model = modelDao.findByModelId(curConfigSchema.getModelId());
                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;

                    log.info("DataBase_Call for model: " + duration + " ms");
                    
                    LanguagePairs langPair = model.getLanguages();
                    for (LanguagePair lp : langPair) {
                        asrResponseConfig.setLanguage(lp);
                    }
                    asrResponseConfig.setServiceId(curConfigSchema.getServiceId());
                    asrResponseConfig.setModelId(curConfigSchema.getModelId());
                    asrResponseConfig.setDomain(model.getDomain());  
                    asrTaskInference.addConfigItem(asrResponseConfig);
                }
                schemaList.add(asrTaskInference);
            }
            if(individualSpec.getTaskType() == SupportedTasks.TRANSLATION)
            {
                TranslationTaskInference translationTaskInference = new TranslationTaskInference();
                for(ConfigSchema curConfigSchema : individualSpec.getTaskConfig())
                {
                    TranslationResponseConfig translationResponseConfig = new TranslationResponseConfig();
                    log.info("Checking Model ID :: "+curConfigSchema.getModelId());
                    long startTime = System.currentTimeMillis();

                    ModelExtended model = modelDao.findByModelId(curConfigSchema.getModelId());
                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;

                    log.info("DataBase_Call for model: " + duration + " ms");
                    LanguagePairs langPair = model.getLanguages();
                    for (LanguagePair lp : langPair) {
                        translationResponseConfig.setLanguage(lp);
                    }
                    translationResponseConfig.setServiceId(curConfigSchema.getServiceId());
                    translationResponseConfig.setModelId(curConfigSchema.getModelId());
                    translationTaskInference.addConfigItem(translationResponseConfig);
                }
                schemaList.add(translationTaskInference);
            }
            if(individualSpec.getTaskType() == SupportedTasks.TTS)
            {
                TTSTaskInference ttsTaskInference = new TTSTaskInference();
                for(ConfigSchema curConfigSchema : individualSpec.getTaskConfig())
                {
                    TTSResponseConfig ttsResponseConfig = new TTSResponseConfig();
                    log.info("Checking Model ID :: "+curConfigSchema.getModelId());
                    long startTime = System.currentTimeMillis();

                    ModelExtended model = modelDao.findByModelId(curConfigSchema.getModelId());
                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;

                    log.info("DataBase_Call for model: " + duration + " ms");
                    LanguagePairs langPair = model.getLanguages();
                    for (LanguagePair lp : langPair) {
                        ttsResponseConfig.setLanguage(lp);
                    }
                    ttsResponseConfig.setServiceId(curConfigSchema.getServiceId());
                    ttsResponseConfig.setModelId(curConfigSchema.getModelId());
					TTSInference tTSInference = (TTSInference) model.getInferenceEndPoint().getSchema();
                    ttsResponseConfig.setSupportedVoices(tTSInference.getSupportedVoices());
                    ttsTaskInference.addConfigItem(ttsResponseConfig);
                }
                schemaList.add(ttsTaskInference);
            }
            if(individualSpec.getTaskType() == SupportedTasks.TRANSLITERATION)
            {
                TransliterationTaskInference transliterationTaskInference = new TransliterationTaskInference();
                for(ConfigSchema curConfigSchema : individualSpec.getTaskConfig())
                {
                    TransliterationResponseConfig transliterationResponseConfig = new TransliterationResponseConfig();
                    log.info("Checking Model ID :: "+curConfigSchema.getModelId());
                    long startTime = System.currentTimeMillis();

                    ModelExtended model = modelDao.findByModelId(curConfigSchema.getModelId());
                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;

                    log.info("DataBase_Call for model: " + duration + " ms");
                    LanguagePairs langPair = model.getLanguages();
                    for (LanguagePair lp : langPair) {
                    	transliterationResponseConfig.setLanguage(lp);
                    }
                    transliterationResponseConfig.setServiceId(curConfigSchema.getServiceId());
                    transliterationResponseConfig.setModelId(curConfigSchema.getModelId());
					
                    transliterationTaskInference.addConfigItem(transliterationResponseConfig);
                }
                schemaList.add(transliterationTaskInference);
            }
            if(individualSpec.getTaskType() == SupportedTasks.OCR)
            {
                OCRTaskInference ocrTaskInference = new OCRTaskInference();
                for(ConfigSchema curConfigSchema : individualSpec.getTaskConfig())
                {
                    OCRResponseConfig ocrResponseConfig = new OCRResponseConfig();
                    log.info("Checking Model ID :: "+curConfigSchema.getModelId());
                    long startTime = System.currentTimeMillis();

                    ModelExtended model = modelDao.findByModelId(curConfigSchema.getModelId());
                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;

                    log.info("DataBase_Call for model: " + duration + " ms");
                    LanguagePairs langPair = model.getLanguages();
                    for (LanguagePair lp : langPair) {
                    	ocrResponseConfig.setLanguage(lp);
                    }
                    ocrResponseConfig.setServiceId(curConfigSchema.getServiceId());
                    ocrResponseConfig.setModelId(curConfigSchema.getModelId());
					
                    ocrTaskInference.addConfigItem(ocrResponseConfig);
                }
                schemaList.add(ocrTaskInference);
            }
        }

        return schemaList;
    }
    
    PipelineResponseLanguagesListWithScript getPipelineResponseLanguagesListWithScript(TaskSpecifications individualTaskSpecifications) {
    	PipelineResponseLanguagesListWithScript pipelineResponseLanguagesList = new PipelineResponseLanguagesListWithScript();

        // Go through each config of the first task
        for (ConfigSchema firstTaskConfigSchema : individualTaskSpecifications.get(0).getTaskConfig()) {
            PipelineResponseLanguageSchemaWithScript responseLanguageSchema = new PipelineResponseLanguageSchemaWithScript();
            // set source language as language of the first task
            boolean sourceLanguageExists = false;
            //see if the source language exists already
            int responseSchemaIndex = -1;
            for(int i=0;i<pipelineResponseLanguagesList.size();i++)
            {
                if(pipelineResponseLanguagesList.get(i).getSourceLanguage().equals(firstTaskConfigSchema.getSourceLanguage())
                		&&pipelineResponseLanguagesList.get(i).getSourceScriptCode().equals(firstTaskConfigSchema.getSourceScriptCode()))
                	
                {
                    sourceLanguageExists = true;
                    responseSchemaIndex = i;
                    break;
                }
            }
            responseLanguageSchema.setSourceLanguage(firstTaskConfigSchema.getSourceLanguage());
            responseLanguageSchema.setSourceScriptCode(firstTaskConfigSchema.getSourceScriptCode());
            List<ConfigSchema> targetLanguages = new ArrayList<ConfigSchema>();
            targetLanguages.add(firstTaskConfigSchema);

            int targetLangSize = targetLanguages.size();
            int currentTask = 1;
            // for each element within targetLanguages, find possible combinations in the
            // next task
            // DFS Logic for Language Identification
            while (currentTask < individualTaskSpecifications.size()) {
                while (targetLangSize > 0) {
                    // Obtain target language details of previous task
                    ConfigSchema previousTaskTargetLanguage = targetLanguages.get(0);
                    targetLanguages.remove(0);
                    // Get all task config for current task
                    for (ConfigSchema currentTaskConfigSchema : individualTaskSpecifications.get(currentTask)
                            .getTaskConfig()) {
                        if (previousTaskTargetLanguage.getTargetLanguage() == currentTaskConfigSchema
                                .getSourceLanguage() &&
                                previousTaskTargetLanguage.getTargetScriptCode() == currentTaskConfigSchema
                                        .getSourceScriptCode()) {
                            targetLanguages.add(currentTaskConfigSchema);
                        }
                    }
                    targetLangSize--;
                }
                targetLangSize = targetLanguages.size();
                currentTask++;
            }
            for (ConfigSchema finalTaskConfigSchema : targetLanguages) {
            	LanguagePair finalLanguagePair = new LanguagePair();
            	finalLanguagePair.setTargetLanguage(finalTaskConfigSchema.getTargetLanguage());
            	finalLanguagePair.setTargetScriptCode(finalTaskConfigSchema.getTargetScriptCode());

                if(responseLanguageSchema.getTargetLanguageList()==null ||
                    !responseLanguageSchema.getTargetLanguageList().contains(finalLanguagePair))
                {
                    if(sourceLanguageExists == true)
                    {   
                        if(!pipelineResponseLanguagesList.get(responseSchemaIndex).getTargetLanguageList().contains(finalLanguagePair))
                        pipelineResponseLanguagesList.get(responseSchemaIndex).addTargetLanguageListItem(finalLanguagePair);
                    }
                    else
                    {
                        responseLanguageSchema.addTargetLanguageListItem(finalLanguagePair);                        
                    } 
                }
            }
            if(sourceLanguageExists == false)
                pipelineResponseLanguagesList.add(responseLanguageSchema);
        }
        return pipelineResponseLanguagesList;
    }

}